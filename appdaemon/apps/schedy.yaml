schedy_heating:  
  # An arbitrary name for this instance of Schedy,
  # needed e.g. for addressing events to it.
  # Obligatory settings that tell appdaemon where to find the app.
  # You shouldn't need to change these two.
  module: hass_apps_loader
  class: SchedyApp

  # Enable debugging output
  debug: true


  # By default, Schedy tries to restore its previous state at startup
  # from the records stored in Home Assistant. This includes scheduled
  # values, manual adjustments and re-scheduling times - just everything.
  # When this behaviour is not desired, change this setting to true
  # and Schedy will just apply the schedules at startup, no matter what
  # the previous actor states were.
  #reset_at_startup: false


  # If you enable this option, potentially harmful expressions received
  # in schedy_set_value events are evaluated.
  #expressions_from_events: false

  # Here you can define Python modules that should be available
  # inside your expressions. These modules are imported upon Schedy's
  # initialization, hence you have to restart AppDaemon after making
  # changes to these modules.
  expression_modules:
    #math:
    #my_custom_module:
      # Optionally, define an alternative name under which the module
      # should be available.
      #as: alt_name


  # Chose the type of actors that should be controlled by this instance
  # of Schedy.
  # Possible types can be found in the documentation.
  #actor_type: <required>
  actor_type: thermostat

  # In the following config block, you may define templates with
  # settings that affect multiple actors in your setup. These can then be
  # used as a starting point for the configuration of individual actors.
  # Nested inclusion of templates is possible as well.
  actor_templates:

    # Each template needs to have a name.
    #my_template:

      # Optionally have this template based on another one.
      #template: other_template

      # Actor type-specific settings can be found in the documentation.
      #foo: bar
      #...


  # Add schedule rules you want to have prepended to each room's schedule
  # automatically here.
  schedule_prepend:

  # Add schedule rules you want to have appended to each room's schedule
  # automatically here.
  schedule_append:

  # Optionally, configure schedule snippets (lists of rules) that can
  # be included by expressions dynamically. See the documentation for
  # an example on how to use them.
  schedule_snippets:

    #summer:
    #- ...


  # When you use expressions in your schedules that query the state of
  # entities, you should tell Schedy which entities the schedules depend
  # on. It can then watch for state changes of these and re-evaluate
  # schedules automatically.
  # Note: Entities listed here trigger a re-evaluation in all rooms. For
  # entities only used in the schedules of particular rooms, use the
  # per-room watched_entities list.
  watched_entities:
  - binary_sensor.in_bed
  - sensor.current_state

    # Each entry has to be a string consisting of up to three
    # colon-separated parts:
    #
    # 1. The id of the entity to watch. This is mandatory.
    # 2. Which attributes to watch for changes of, either a single
    #    attribute or a comma-separated list.
    #    The special value "all" listens for changes of any attribute. Try
    #    to avoid this whenever possible as it can increase the load
    #    significantly.
    #    Default: "state"
    # 3. The re-evaluation mode as known from the schedy_reevaluate event.
    #    The special mode "ignore" causes no re-evaluation, it just
    #    suppresses the warnings generated when the entity is queried from
    #    an expression.
    #    Default: "reevaluate"
    #
    # Examples:
    # - "binary_sensor.motion"
    # - "binary_sensor.motion:all"
    # - "binary_sensor.motion::reset"
    # - "binary_sensor.motion:state,other_attribute:reset"
    # - "binary_sensor.motion:all:ignore"
    # - climate.parents_bedroom_thermostat
    # - climate.living_room_thermostat
    # - climate.library_thermostat
    # - climate.baby_bedroom_thermostat
    # - climate.shower_thermostat
    # Note: Entities listed here trigger a re-evaluation in all rooms. For
    # entities only used in the schedules of particular rooms, use the
    # per-room watched_entities list.

  # Configure your rooms here.
  rooms:

    # Create such a block for every room you want to control.
    living_room:
      friendly_name: Living Room
      allow_manual_changes: true
      rescheduling_delay: 0
      actors:
        climate.living_room_thermostat:
          # template: default
          off_temp: 15

      schedule:
      # 21 degrees on weekdays, from 9pm to 9am
      - v: 21
        rules:

        # if on holidays, just break
        - x: "Break() if state('sensor.current_state') == 'on_vacation' else Skip()"

        # on normal working days, turn on from 06:30 to 07:00
        - weekdays: 1-5
          rules:
          - { start: "06:30", end: "09:00"}
          - { start: "17:30", end: "23:59"}
          - x: "Add(-3) if is_on('binary_sensor.in_bed') else Skip()"

        - weekdays: 6-7
          rules:
          - { start: "07:00", end: "23:00"}
          - x: "Add(-3) if is_on('binary_sensor.in_bed') else Skip()"


      # 
      # for the rest, 17 degrees
      - v: 17.5
      - x: "Add(+4) if ( is_on('binary_sensor.household_home')  and is_off('binary_sensor.in_bed')    ) else Skip()"

      watched_entities:
      - climate.living_room_thermostat
      - binary_sensor.in_bed



    # Create such a block for every room you want to control.
    library:
      friendly_name: Library
      allow_manual_changes: true
      rescheduling_delay: 120
      actors:
        climate.library_thermostat:
          # template: default
          off_temp: 15

      schedule:
      # 21 degrees on weekdays, from 9pm to 9am
      - v: 19
      #   weekdays: 1-5
      #   start: "8:00"
      #   end: "9:00"
        rules:
        # if on holidays, just break
        - x: "Break() if state('sensor.current_state') == 'on_vacation' else Skip()"

        - v: 18
          weekdays: 1-5
          start: "19:00"
          end: "21:00"

        # 20 degrees on weekends, from x to y
        - v: 19
          weekdays: 6,7
          start: "10:00"
          end: "21:00"
        # for the rest, v degrees
      - v: 17

      watched_entities:
      - climate.library_thermostat

    # Create such a block for every room you want to control.
    bedroom_parents:
      friendly_name: Parents Bedroom
      allow_manual_changes: true
      # rescheduling_delay: 120
      actors:
        climate.parents_bedroom_thermostat:
          # template: default
          off_temp: 14

      schedule:
      - v: 20
        rules:
        # if on holidays, just break
        - x: "Break() if state('sensor.current_state') == 'on_vacation' else Skip()"

        # 20 degrees on weekdays, from 9pm to 9am
        - v: 20
          weekdays: 1-5
          start: "20:40"
          end: "9:00"

        # 20 degrees on weekends, from x to y
        - v: 20
          weekdays: 6,7
          start: "21:00"
          end: "10:00"

        # for the rest, v degrees
      - x: "20 if is_on('binary_sensor.in_bed') else Skip()"
        # changed to 10, not 15 because of waitress...
      - v: 10

      watched_entities:
      - climate.parents_bedroom_thermostat
      - binary_sensor.in_bed

    # Create such a block for every room you want to control.
    bedroom_baby:
      friendly_name: Baby Bedroom
      allow_manual_changes: true
      # rescheduling_delay: 120
      actors:
        climate.baby_bedroom_thermostat:
          # template: default
          off_temp: 15

      schedule:
      - v: 20
        rules:
        # if on holidays, just break
        - x: "Break() if state('sensor.current_state') == 'on_vacation' else Skip()"

        # 20 degrees on weekdays, from 9pm to 9am
        - v: 20.5
          weekdays: 1-5
          start: "19:30"
          end: "8:00"

        # 20 degrees on weekends, from x to y
        - v: 20.5
          weekdays: 6,7
          start: "19:30"
          end: "9:00"

        # for the rest, v degrees
      - v: 17

      watched_entities:
      - climate.baby_bedroom_thermostat

    shower:
      friendly_name: Shower Room
      allow_manual_changes: true
      # rescheduling_delay: 120
      actors:
        climate.shower_thermostat:
          # template: default
          off_temp: 14

      schedule:
      - v: 15
        rules:
        # if on holidays, just break
        - x: "Break() if state('sensor.current_state') == 'on_vacation' else Skip()"

        # 20 degrees on weekdays, from 9pm to 9am
        - v: 20
          weekdays: 1-5
          start: "7:00"
          end: "8:30"

        # 20 degrees on weekends, from x to y
        # - v: 20
        #   weekdays: 6,7
        #   start: "7:45"
        #   end: "8:30"

        # for the rest, v degrees
      - v: 15

      watched_entities:
      - climate.shower_thermostat

    #living:

      # An alternative friendly name to display in logs.
      #friendly_name: ...

      # When you disable this setting, Schedy won't allow actors to
      # change their value to something different from the scheduled
      # one or the one set by a schedy_set_value event. Actors
      # that change their value are then set back to the wanted one
      # immediately.
      #allow_manual_changes: true

      # This setting controls whether changes reported by one actor
      # should automatically be replicated to the other ones in this
      # particular room.
      #replicate_changes: true

      # Set this value to a number of minutes and Schedy will
      # automatically again apply the schedule after a manual change has
      # been made. If you, for instance, use the thermostat actor type,
      # change the target temperature at one of your thermostats and
      # this value is set to 120, Schedy will again apply the schedule
      # two hours after you made the change.
      # 0 means not re-schedule before the next scheduled value change
      # occurs.
      #rescheduling_delay: 0

      # All actors of this room go here.
      #actors:

        # This could be a sample thermostat.
        #climate.living1:

          # Choose the template this actor should inherit its settings
          # from.
          # By default, an actor inherits its settings from the "default"
          # template, given that you defined it.
          #template: default

          # We could, for instance, overwrite the delta defined in the
          # template, if any, for this particular thermostat only.
          #delta: 1.0



          # Delta that is added to the temperature value sent to this
          # thermostat in order to correct potential inaccuracies of
          # the temperature sensor.
          #delta: 0

          # The minimum/maximum temperature the thermostat supports.
          # If configured, temperatures outside the supported range are changed
          # to the minimum/maximum value before they're sent to the thermostat.
          # null means there is no limitation.
          #min_temp: null
          #max_temp: null

          # When this is set to something different than "OFF", Schedy will
          # rewrite the value OFF into this temperature before sending it to
          # the thermostat. You can set it to 4.0 degrees (if your thermostat
          # supports this low value) in order to prevent frost-induced damage
          # to your heating setup.
          # This setting is required when you want to send OFF to thermostats with
          # disabled operation mode support.
          #off_temp: "OFF"

          # Set this to false if your thermostat doesn't support operation modes.
          # Please note that you won't be able to turn it off completely without
          # operation mode support. Remember to also configure off_temp when you
          # disable this feature.
          #supports_opmodes: true

          # These two settings can be used to tweak the names of the
          # operation modes.
          #opmode_on: heat
          #opmode_off: "off"


          #######################################################################
          # The following settings normally don't need to be touched unless you #
          # want to abuse the thermostat actor to control something different.  #
          #######################################################################

          # You might want to use an alternative service that receives
          # the operation mode name.
          #opmode_on_service: climate/set_operation_mode
          #opmode_off_service: climate/set_operation_mode
          # The service call parameter which the operation mode should be
          # sent as. Set to null in order to omit the operation mode from the
          # service call.
          #opmode_on_service_attr: operation_mode
          #opmode_off_service_attr: operation_mode
          # Entity attribute that holds the name of the current operation mode.
          # This is used to detect manual temperature adjustments, provide
          # correct temperature values on startup and notice that a
          # thermostat picked up temperature changes.
          #opmode_state_attr: operation_mode

          # These are the counterparts for opmode_service_* and opmode_state_*.
          #target_temp_service: climate/set_temperature
          #target_temp_service_attr: temperature
          #target_temp_state_attr: temperature

          ### This feature is currently unused and reserved for later use.
          # Entity attribute that holds the current temperature as measured
          # by the thermostat's temperature sensor.
          # If your thermostat doesn't support current temperature reporting,
          # set the value to null in order to disable it.
          #current_temp_state_attr: current_temperature


      # The room's schedule, consisting of multiple rules.
      # schedule:
      #- ...

      # The same as the global watched_entities above, but these only
      #  trigger a re-evaluation for this particular room.
      # watched_entities:
      #- ...


    # Configure statistical parameters to be collected.
    statistics:

      # Pick an arbitrary name for the parameter instance.
      #some_name:
        # The type of parameter as found in the actor'S documentation.
        #type: <required>
        # More parameter-specific settings ...

      # More parameter instances ...
